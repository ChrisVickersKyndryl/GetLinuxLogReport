---

# Get log size report  
- name: Get log file data and return email
  hosts: all
  gather_facts: true
  ignore_errors: yes
  vars:
    log_files:
      - "/var/log/dnf.log.1"
      #- "/var/log/messages.1"
      - "/var/log/vmware-network.log.1"
    
  tasks:
  
    - name: Create a temp folder to store all the information
      file:
        path: /tmp/result
        state: directory
      delegate_to: localhost
      run_once: true

    - name: Get server log into by running the bash script
      shell: "{{ lookup('template', 'scripts/Get_Log_Size.sh') }}"
      register: shell_output
      loop: "{{ log_files }}"

    #- debug:
    #    msg:
    #      - "{{ shell_output }}"
    #      - "{{ shell_output.results }}"
    #      - "{{ shell_output.results[0].stdout }}"
      
    #- name: Get server log into by running the bash script
    #  shell: bash scripts/Get_Log_Size.sh "{{ item }}" 
    #  register: shell_output
    #  loop: "{{ log_files }}"
    
    - name: Create single file of the result
      copy:
        dest: "/tmp/result/{{ ansible_hostname }}.log"
        content: |
          <tr>
            <td>{{ ansible_hostname }}</td>
            <td>{{ inventory_hostname }}</td>
            <td>
              {{ shell_output.results[0].stdout }} - {{ shell_output.results[0].stdout | filesizeformat(true) }}
              <br/>{{ shell_output.results[1].stdout }} - {{ shell_output.results[1].stdout | filesizeformat(true) }}
              <br/>{{ shell_output.results[1].stdout }} - {{ shell_output.results[1].stdout | filesizeformat(true) }}
            </td>
            <td>{{ shell_output.results[0].stdout + shell_output.results[1].stdout }}</td>
            <td>{{ (shell_output.results[0].stdout + shell_output.results[1].stdout) | filesizeformat(true) }}</td>
          </tr>
      #when: shell_output.stdout != "Job exceeded the timeout and will be cancelled."
      delegate_to: localhost
     
    - name: Find all result files from the servers
      find:
        paths: "/tmp/result/"
        patterns: "*.log"
      register: text_files
      delegate_to: localhost
      run_once: true
    
    - name: Creating an empty file to store the single summary that willbe used in the email
      copy:
        dest: "/tmp/result/Summary.htm"
        content: ""
      delegate_to: localhost
      run_once: true
    
    - name: Popullate the summary html file that will be emailed
      lineinfile:
        dest: "/tmp/result/Summary.htm"
        line: "{{ lookup('file', item.path) }}"
        insertafter: EOF
      loop: "{{ text_files.files }}"
      delegate_to: localhost
      run_once: true

      
